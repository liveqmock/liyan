package ${model.packageName}.action;
import com.innofi.framework.service.IBaseService;
import ${model.packageName}.pojo.${model.modelName};
import ${model.packageName}.service.I${model.modelName}Service;
import com.innofi.framework.dao.hibernate.PropertyFilter; 
import com.innofi.framework.action.impl.BaseActionImpl;
import java.util.Collection;
import java.util.Iterator;
import javax.annotation.Resource;
import org.springframework.stereotype.Component;
import com.bstek.dorado.annotation.DataProvider;
import com.bstek.dorado.annotation.DataResolver;
import com.bstek.dorado.data.entity.EntityState;
import com.bstek.dorado.data.entity.EntityUtils;
import com.bstek.dorado.data.provider.Page;
import com.innofi.framework.utils.validate.Validator;
import org.hibernate.criterion.DetachedCriteria;
import com.bstek.dorado.hibernate.HibernateUtils;
import com.bstek.dorado.data.provider.Criteria;
import java.util.ArrayList; 
import java.util.Collection; 
import java.util.Iterator; 
import java.util.List; 
import java.util.Map;

/**
* 功能/ 模块：${model.modelName}模块
*
* @author  liumy2009@126.com
* @version V1.0.0
*          为dorado7界面维护操作的提供支持，实现${model.modelName}对象信息的加载与保存操作
*          修订历史：
*          日期  作者  参考  描述
*          北京名晟信息技术有限公司版权所有.
*/
@Component("${model.beanName}Action")
public class ${model.modelName}Action extends BaseActionImpl {
    @Resource
    private I${model.modelName}Service ${model.beanName}Service;

    public IBaseService getBusinessService(){
        return ${model.beanName}Service;
    }

    @DataProvider
    public void find${model.modelName}s(Page page, Criteria criteria) throws Exception {
        com.innofi.framework.dao.pagination.Page innofiPage = super.translateDoradoPageToInnofiPage(page);
        if(Validator.isNotNull(criteria)){
            DetachedCriteria detachedCriteria = DetachedCriteria.forClass(getBusinessService().getEntityType());
            HibernateUtils.createFilter(detachedCriteria, criteria);
            getBusinessService().findByPageAndCriteria(innofiPage, detachedCriteria);
        }else{
            getBusinessService().findByPage_Filters(null, null, innofiPage);
        }
    }
    
    @DataProvider
    public void find${model.modelName}s(Page page, Map<String, Object> parameter) throws Exception {

        List<PropertyFilter> propertyFilters = new ArrayList<PropertyFilter>();

    	if(parameter != null){
    	#foreach($field in $fields)
		#if(${field.searchFlag}=="1"&&${field.javaType}!="Date")
    	addPropertyFilter(propertyFilters,"${field.columnName}",parameter.get("${field.columnName}"),(String)parameter.get("qM${field.columnName}"),true);
		#end
		#if(${field.searchFlag}=="1"&&${field.javaType}=="Date")
		addDateRangePropertyFilter(propertyFilters, "${field.columnName}", parameter);
		#end
		#end
		}

        com.innofi.framework.dao.pagination.Page innofiPage = super.translateDoradoPageToInnofiPage(page);

        ${model.beanName}Service.findByPage_Filters(propertyFilters, null, innofiPage);

    }
    @DataResolver
    public void save${model.modelName}s(Collection<${model.modelName}> objs) {
        for (Iterator iterator = objs.iterator(); iterator.hasNext(); ) {
            ${model.modelName} ${model.beanName} = (${model.modelName}) iterator.next();
            EntityState state = EntityUtils.getState(${model.beanName});
            if (EntityState.NEW.equals(state)) {
                ${model.beanName}Service.save(${model.beanName});
            } else if (EntityState.MODIFIED.equals(state)) {
                ${model.beanName}Service.update(${model.beanName});
            } else if (EntityState.DELETED.equals(state)) {
                ${model.beanName}Service.delete(${model.beanName});
            }
        }
    }
}
